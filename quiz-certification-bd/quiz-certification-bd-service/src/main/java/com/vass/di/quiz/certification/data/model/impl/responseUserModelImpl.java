/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vass.di.quiz.certification.data.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.vass.di.quiz.certification.data.model.responseUser;
import com.vass.di.quiz.certification.data.model.responseUserModel;
import com.vass.di.quiz.certification.data.model.responseUserSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the responseUser service. Represents a row in the &quot;QUIZ_responseUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>responseUserModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link responseUserImpl}.
 * </p>
 *
 * @author dgarces
 * @see responseUserImpl
 * @generated
 */
@JSON(strict = true)
public class responseUserModelImpl
	extends BaseModelImpl<responseUser> implements responseUserModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a response user model instance should use the <code>responseUser</code> interface instead.
	 */
	public static final String TABLE_NAME = "QUIZ_responseUser";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"responseUserId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"questionId", Types.BIGINT},
		{"answerId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responseUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table QUIZ_responseUser (uuid_ VARCHAR(75) null,responseUserId LONG not null primary key,userId LONG,questionId LONG,answerId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table QUIZ_responseUser";

	public static final String ORDER_BY_JPQL =
		" ORDER BY responseUser.responseUserId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY QUIZ_responseUser.responseUserId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long RESPONSEUSERID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static responseUser toModel(responseUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		responseUser model = new responseUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setResponseUserId(soapModel.getResponseUserId());
		model.setUserId(soapModel.getUserId());
		model.setQuestionId(soapModel.getQuestionId());
		model.setAnswerId(soapModel.getAnswerId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<responseUser> toModels(responseUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<responseUser> models = new ArrayList<responseUser>(
			soapModels.length);

		for (responseUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public responseUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _responseUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setResponseUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _responseUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return responseUser.class;
	}

	@Override
	public String getModelClassName() {
		return responseUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<responseUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<responseUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<responseUser, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((responseUser)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<responseUser, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<responseUser, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(responseUser)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<responseUser, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<responseUser, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, responseUser>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			responseUser.class.getClassLoader(), responseUser.class,
			ModelWrapper.class);

		try {
			Constructor<responseUser> constructor =
				(Constructor<responseUser>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<responseUser, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<responseUser, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<responseUser, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<responseUser, Object>>();
		Map<String, BiConsumer<responseUser, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<responseUser, ?>>();

		attributeGetterFunctions.put("uuid", responseUser::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<responseUser, String>)responseUser::setUuid);
		attributeGetterFunctions.put(
			"responseUserId", responseUser::getResponseUserId);
		attributeSetterBiConsumers.put(
			"responseUserId",
			(BiConsumer<responseUser, Long>)responseUser::setResponseUserId);
		attributeGetterFunctions.put("userId", responseUser::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<responseUser, Long>)responseUser::setUserId);
		attributeGetterFunctions.put("questionId", responseUser::getQuestionId);
		attributeSetterBiConsumers.put(
			"questionId",
			(BiConsumer<responseUser, Long>)responseUser::setQuestionId);
		attributeGetterFunctions.put("answerId", responseUser::getAnswerId);
		attributeSetterBiConsumers.put(
			"answerId",
			(BiConsumer<responseUser, Long>)responseUser::setAnswerId);
		attributeGetterFunctions.put("createDate", responseUser::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<responseUser, Date>)responseUser::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", responseUser::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<responseUser, Date>)responseUser::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getResponseUserId() {
		return _responseUserId;
	}

	@Override
	public void setResponseUserId(long responseUserId) {
		_responseUserId = responseUserId;
	}

	@Override
	public String getResponseUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getResponseUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setResponseUserUuid(String responseUserUuid) {
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_questionId = questionId;
	}

	@JSON
	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_answerId = answerId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, responseUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public responseUser toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, responseUser>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		responseUserImpl responseUserImpl = new responseUserImpl();

		responseUserImpl.setUuid(getUuid());
		responseUserImpl.setResponseUserId(getResponseUserId());
		responseUserImpl.setUserId(getUserId());
		responseUserImpl.setQuestionId(getQuestionId());
		responseUserImpl.setAnswerId(getAnswerId());
		responseUserImpl.setCreateDate(getCreateDate());
		responseUserImpl.setModifiedDate(getModifiedDate());

		responseUserImpl.resetOriginalValues();

		return responseUserImpl;
	}

	@Override
	public int compareTo(responseUser responseUser) {
		long primaryKey = responseUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof responseUser)) {
			return false;
		}

		responseUser responseUser = (responseUser)object;

		long primaryKey = responseUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		responseUserModelImpl responseUserModelImpl = this;

		responseUserModelImpl._originalUuid = responseUserModelImpl._uuid;

		responseUserModelImpl._setModifiedDate = false;

		responseUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<responseUser> toCacheModel() {
		responseUserCacheModel responseUserCacheModel =
			new responseUserCacheModel();

		responseUserCacheModel.uuid = getUuid();

		String uuid = responseUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			responseUserCacheModel.uuid = null;
		}

		responseUserCacheModel.responseUserId = getResponseUserId();

		responseUserCacheModel.userId = getUserId();

		responseUserCacheModel.questionId = getQuestionId();

		responseUserCacheModel.answerId = getAnswerId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			responseUserCacheModel.createDate = createDate.getTime();
		}
		else {
			responseUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			responseUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			responseUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return responseUserCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<responseUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<responseUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<responseUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((responseUser)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<responseUser, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<responseUser, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<responseUser, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((responseUser)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, responseUser>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _responseUserId;
	private long _userId;
	private long _questionId;
	private long _answerId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _columnBitmask;
	private responseUser _escapedModel;

}