/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.vass.di.quiz.certification.data.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.vass.di.quiz.certification.data.model.answer;
import com.vass.di.quiz.certification.data.model.answerModel;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the answer service. Represents a row in the &quot;QUIZ_answer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>answerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link answerImpl}.
 * </p>
 *
 * @author dgarces
 * @see answerImpl
 * @generated
 */
public class answerModelImpl
	extends BaseModelImpl<answer> implements answerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a answer model instance should use the <code>answer</code> interface instead.
	 */
	public static final String TABLE_NAME = "QUIZ_answer";

	public static final Object[][] TABLE_COLUMNS = {
		{"answerId", Types.BIGINT}, {"questionId", Types.BIGINT},
		{"answer", Types.VARCHAR}, {"correct", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("answerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("answer", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("correct", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table QUIZ_answer (answerId LONG not null primary key,questionId LONG,answer VARCHAR(500) null,correct BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table QUIZ_answer";

	public static final String ORDER_BY_JPQL = " ORDER BY answer.answerId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY QUIZ_answer.answerId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long QUESTIONID_COLUMN_BITMASK = 1L;

	public static final long ANSWERID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public answerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _answerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAnswerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _answerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return answer.class;
	}

	@Override
	public String getModelClassName() {
		return answer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((answer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<answer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<answer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(answer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<answer, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<answer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, answer>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			answer.class.getClassLoader(), answer.class, ModelWrapper.class);

		try {
			Constructor<answer> constructor =
				(Constructor<answer>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<answer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<answer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<answer, Object>>();
		Map<String, BiConsumer<answer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<answer, ?>>();

		attributeGetterFunctions.put("answerId", answer::getAnswerId);
		attributeSetterBiConsumers.put(
			"answerId", (BiConsumer<answer, Long>)answer::setAnswerId);
		attributeGetterFunctions.put("questionId", answer::getQuestionId);
		attributeSetterBiConsumers.put(
			"questionId", (BiConsumer<answer, Long>)answer::setQuestionId);
		attributeGetterFunctions.put("answer", answer::getAnswer);
		attributeSetterBiConsumers.put(
			"answer", (BiConsumer<answer, String>)answer::setAnswer);
		attributeGetterFunctions.put("correct", answer::getCorrect);
		attributeSetterBiConsumers.put(
			"correct", (BiConsumer<answer, Boolean>)answer::setCorrect);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getAnswerId() {
		return _answerId;
	}

	@Override
	public void setAnswerId(long answerId) {
		_answerId = answerId;
	}

	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask |= QUESTIONID_COLUMN_BITMASK;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	@Override
	public String getAnswer() {
		if (_answer == null) {
			return "";
		}
		else {
			return _answer;
		}
	}

	@Override
	public void setAnswer(String answer) {
		_answer = answer;
	}

	@Override
	public boolean getCorrect() {
		return _correct;
	}

	@Override
	public boolean isCorrect() {
		return _correct;
	}

	@Override
	public void setCorrect(boolean correct) {
		_correct = correct;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, answer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public answer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, answer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		answerImpl answerImpl = new answerImpl();

		answerImpl.setAnswerId(getAnswerId());
		answerImpl.setQuestionId(getQuestionId());
		answerImpl.setAnswer(getAnswer());
		answerImpl.setCorrect(isCorrect());

		answerImpl.resetOriginalValues();

		return answerImpl;
	}

	@Override
	public int compareTo(answer answer) {
		long primaryKey = answer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof answer)) {
			return false;
		}

		answer answer = (answer)object;

		long primaryKey = answer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		answerModelImpl answerModelImpl = this;

		answerModelImpl._originalQuestionId = answerModelImpl._questionId;

		answerModelImpl._setOriginalQuestionId = false;

		answerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<answer> toCacheModel() {
		answerCacheModel answerCacheModel = new answerCacheModel();

		answerCacheModel.answerId = getAnswerId();

		answerCacheModel.questionId = getQuestionId();

		answerCacheModel.answer = getAnswer();

		String answer = answerCacheModel.answer;

		if ((answer != null) && (answer.length() == 0)) {
			answerCacheModel.answer = null;
		}

		answerCacheModel.correct = isCorrect();

		return answerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((answer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<answer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<answer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<answer, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((answer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, answer>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _answerId;
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private String _answer;
	private boolean _correct;
	private long _columnBitmask;
	private answer _escapedModel;

}